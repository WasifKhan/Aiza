from keys.keys import OPENAI_API_KEY
from openai import OpenAI


class DataGenerator:
    def __init__(self):
        self.model = OpenAI(api_key=OPENAI_API_KEY)
        self.model_version = "gpt-4o"

    def validate_files(self, files):
        system_prompt = """You are to analyze file names to determine if they \
                are files that a person would have created versus files that \
                are either code generated, generated by an AI, just a file \
                that seems accidently created or doesn't seem like it's \
                contents would be valuable. The input will contain file names \
                separated by a space. Provide your response with just \
                space separated "True" or "False" values respectively, where \
                True means the file is a file that a person would have \
                created, and False otherwise. If you are unsure, lean on the \
                side of labeling it False. For example: \
                input: "diary test01 banking doc-fjakd-o2ts3m letter.zip" and \
                output: "True False True False False". Another example: \
                input: "chat_history calls letter-01 research-124-paper" and \
                output: "True True False False"\
                """
        print('Gathering valid files')
        file_names = ' '.join([file['name'] for file in files])
        print(f'files: {file_names}')
        message = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": file_names}
                ]
        print('prompting GPT for response\n\n')
        response = self.model.chat.completions.create(
                model='gpt-4o', messages=message)
        reply = response.choices[0].message.content
        print(reply)
        valid_files = []
        for name, index in enumerate(reply.split()):
            if name == "True":
                valid_files.append(files[index])
        print(f"ChatGPT response for \n{file_names}:\n{reply}")
        return valid_files

    def generate_data(self, data_source):
        """
        Provides interaction with GPT-4o by sending a user query
        and receiving a response.

        :param data_source: User's data file as a string.
        :return: GPT-4o's response as a string.
        """
        system_prompt = """You are a teacher. The user will provide long \
            unstructured text documents. Your goal is to generate questions \
            that could be asked about the text the user provided alongside \
            the associated correct answer. The answers should be concise. \
            Spend time to think about the answer. Provide your response in \
            the exact format: "question: <question> answer: <answer>"\
            """
        message = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": data_source}
                ]
        response = self.model.chat.completions.create(
                model='gpt-4o', messages=message)
        reply = response.choices[0].message.content
        return reply
